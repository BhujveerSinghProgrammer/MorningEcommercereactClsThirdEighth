//Advices:-
=>1.dont use props drilling
=>2.use context in cases where your app is very minimaliztic or one or two extra rerender would not cause any problem.
=>3.setting a redux,adding a package,all of that is costly than using context,if you do very complex data management then use Redux.
else use context for minimal use state management applications.
=>4....[when you are fetching data from web api/or from Json Array like in Category.jsx]You keep your react component light weight as much as possible,keep the business logic in Redux.
=>5.  Remove all the business logic from react component and move it to Redux.
=>6.you move it to your store.and use your actions to do all of that.you move it to your global store,and use the cycle of the Action
,Dispatch everything.

=>7.How would we accomodate that in our cart reducer?so we need to create the Categories Reducer.to maintain separtion.so full code of Category.jsx is given below:-


import { useEffect, useState } from "react";
import "./Category.css";

const productsOne = [
  { id: 1, name: "Mobile" },
  { id: 2, name: "Laptops" },
  { id: 3, name: "Clothes" },
];

function GetProductsApi(callback) {
  console.log("Category api called");
  setTimeout(() => {
    callback(productsOne);
  }, 1000);
}

// Api call to get the data 
export default function Categories() {
  let [categories, setCategories] = useState([]); 

  console.log("Category api call started");

  useEffect(() => {
    GetProductsApi((resp) => {
      setCategories(resp);
      console.log("Category api call ended");
    });
  }, []); // Only call once when the component mounts

  console.log(categories);

  return (
    <div className="category">
      <span>Categories are:- </span>
      <ul>
        {categories.map((item) => (
          <li key={item.id}>{item.name}</li> // Ensure to return the JSX
        ))}
      </ul>
    </div>
  );
}

=>8.
