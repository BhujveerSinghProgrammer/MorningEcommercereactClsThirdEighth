
Note:- We are passing function(loadCategories) to Dispatch Like given below:-
______________________________________________________________________________________
stores-->Index.js
__________________________
import { combineReducers, legacy_createStore as createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk"; //here we are applying applyMiddleware from  thunk..



import cartReducer from "./cart";
import categoriesReducer from "./categories";

const reducer = combineReducers({
  cart: cartReducer,
  categories: categoriesReducer
});

const store = createStore(reducer, applyMiddleware(thunk));

export default store;

// that redux has only one store





Categories.jsx



import { useDispatch, useSelector } from "react-redux";

import { loadCategories } from "../../stores/categories";
function Categories() {
  const dispatch = useDispatch();


   // Call loadCategories when the component mounts
  // useEffect(() => {
  //   dispatch(loadCategories());
  // }, [dispatch]);

  //or

   dispatch(loadCategories());



  const categories = useSelector((state) => {
    return state.categories.categories;
  });
  console.log(categories);
  return (
    <div>
      <ul>
        {categories.map((item) => (
          <li key={item.id}> {item.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default Categories;



 Dispatch always Dispatch an object,it will never Dispatch an function. thats what redux had told in its syntax that a Dispatch is always going to take an object,its never going to take function,redux says that i dont have the capablity to handle this function that you are calling in Dispatch.
so to enhance the capablity of Redux,introducing a middleware like thunk,by thunk you can use function call with Dispatch.  


=>Imp:-Note:- thunk says that:- you can simply Dispatch function calls not just objects. (in stores-->index.js),
so in order to Dispatch function calls,enhance the Redux by applying a middleware(applyMiddleware) which is thunk,which would be able to accept the function call, not just an object.
we are dispatching function in [Categories-->Categories.js]
applyMiddleware is a function available inside redux,so in order to dispatch function calls ,
it enhances the reducer/redux by applying a middleware which is thunk,which would be able to accept the function call,not just an object.


==>Q1:-How can react and redux talk to each other?
Ans:- react and redux talk to each other using your "react-redux" hook that is using "useDispatch" that is provided to you,
react will dispatch something to redux,suggesting that this is the action that i want you to take,
->What is something that you can dispatch:-you can dispatch an action
->In that action what you can dispatch:-you can dispatch an object in that action
->But in our Categories.jsx under Categories Folder, we are trying to dispatch a function:-But Redux say that i dont have capablity to catch a function, so redux says instead of me building that capablity in myself,because thats not the capablity everybody look for,i would
probably use package for this that is redux-thunk, which is middleware on top of redux,
whose job is to take in a function and to return an object.
it takes a function and return object in redux.
--<so your thunk middleware will take an input as a function and output as an object,




==>Q2:- if your array on initial load is empty then ?
Ans:- if array in categories is empty then use "?" , this will work when its not empty
return (
    <div>
      <ul>
        {categories?.map((item) => (  // if on initial loads 
          <li key={item.id}> {item.name}</li>
        ))}
      </ul>
    </div>
  );


==>Q3:- Is store persisted after browser's refresh?
Ans:- no,store is not persisted after the browser's refreh,its persisted across the state.

==>Q4:-Build:-
Ans:-Gym,Online Trainers.Nykaa,Shopify(no front end and backend website)



//Advices:-
=>1.dont use props drilling
=>2.use context in cases where your app is very minimaliztic or one or two extra rerender would not cause any problem.
=>3.setting a redux,adding a package,all of that is costly than using context,if you do very complex data management then use Redux.
else use context for minimal use state management applications.
=>4....[when you are fetching data from web api/or from Json Array like in Category.jsx]You keep your react component light weight as much as possible,keep the business logic in Redux.
=>5.  Remove all the business logic from react component and move it to Redux.
=>6.you move it to your store.and use your actions to do all of that.you move it to your global store,and use the cycle of the Action
,Dispatch everything.

=>7.How would we accomodate that in our cart reducer?so we need to create the Categories Reducer.to maintain separtion.so full code of Category.jsx is given below:-


import { useEffect, useState } from "react";
import "./Category.css";

const productsOne = [
  { id: 1, name: "Mobile" },
  { id: 2, name: "Laptops" },
  { id: 3, name: "Clothes" },
];

function GetProductsApi(callback) {
  console.log("Category api called");
  setTimeout(() => {
    callback(productsOne);
  }, 1000);
}

// Api call to get the data 
export default function Categories() {
  let [categories, setCategories] = useState([]); 

  console.log("Category api call started");

  useEffect(() => {
    GetProductsApi((resp) => {
      setCategories(resp);
      console.log("Category api call ended");
    });
  }, []); // Only call once when the component mounts

  console.log(categories);

  return (
    <div className="category">
      <span>Categories are:- </span>
      <ul>
        {categories.map((item) => (
          <li key={item.id}>{item.name}</li> // Ensure to return the JSX
        ))}
      </ul>
    </div>
  );
}

=>8.Redux has the limit to have one store not multiple store.
=>9.but you need multiple Reducers
=>10.so if you have only one store then you will have to combined those reducers into one store.
=>11.so Lets create a stores folder. in this we will create cart ,and categories js files for diffrent diffrent reducers and merge these two files into one index.js file
=>12.What are two things that reducer take as parameters?
Ans:-state and action (function cartReducers(state = { items: {} }, action) {})
action adnd payloads are inside the action.
==>13.Redux has the limit to have one store not multiple store. and we can have one store and one provider but multiple reducers.
==>so you we need to combined multiple reducers into one global state. then provide it to store.


